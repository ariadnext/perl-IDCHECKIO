From b63e02c73c4a1684a42f8d742ad6cb68cf67f3e4 Mon Sep 17 00:00:00 2001
From: Denis Jagoudel <denis.jagoudel@ariadnext.com>
Date: Tue, 6 Dec 2016 18:39:40 +0100
Subject: [PATCH] Update README

---
 README.md | 130 ++++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 76 insertions(+), 54 deletions(-)

diff --git a/README.md b/README.md
index 8d74347..30e64b7 100644
--- a/README.md
+++ b/README.md
@@ -4,6 +4,14 @@ IdcheckioPerl::Client::Role - a Moose role for the IdCheck.IO API
 
 Check identity documents
 
+![image](https://www.idcheck.io/content/uploads/sites/2/2015/12/tick_mark.png)
+
+Web application : <https://idcheck.io>
+
+Mashape REST API : <https://market.mashape.com/ariadnext/idcheck-io-api>
+
+Swagger REST API : <https://api.idcheck.io/swagger/#/>
+
 # VERSION
 
 Automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:
@@ -15,43 +23,60 @@ Automatically generated by the [Swagger Codegen](https://github.com/swagger-api/
 
 ## A note on Moose
 
-This role is the only component of the library that uses Moose. See 
-IdcheckioPerl::Client::ApiFactory for non-Moosey usage. 
+This role is the only component of the library that uses Moose. See
+IdcheckioPerl::Client::ApiFactory for non-Moosey usage.
+
+## Requirements.
+
+**Credentials**
+
+To get your credentials, contact us by email with your all needs at: contact@idcheck.io
+You will receive two sets of credentials: one for test purpose only and on for production.
+
+**Platforms**
+
+Three platforms can be targeted with the library:
+
+| Platform   |      API URL                     | Credentials | Purpose                                  | Restriction                            | Cost                 |
+-------------|----------------------------------|-------------|------------------------------------------|----------------------------------------|----------------------|
+| SANDBOX    | https://sandbox.idcheck.io/rest  | Test        | Dev integration + automated tests        | Only a fix set of images are supported | Free
+| TEST       | https://api-test.idcheck.io/rest | Test        | Functional tests / Idcheck.io evaluation | No SLA                                 | Commercial agreement
+| PROD       | https://api.idcheck.io/rest      | Prod        | Production service                       | None                                   | Commercial agreement
 
 # SYNOPSIS
 
-The Perl Swagger Codegen project builds a library of Perl modules to interact with 
-a web service defined by a OpenAPI Specification. See below for how to build the 
+The Perl Swagger Codegen project builds a library of Perl modules to interact with
+a web service defined by a OpenAPI Specification. See below for how to build the
 library.
 
-This module provides an interface to the generated library. All the classes, 
-objects, and methods (well, not quite \*all\*, see below) are flattened into this 
-role. 
+This module provides an interface to the generated library. All the classes,
+objects, and methods (well, not quite \*all\*, see below) are flattened into this
+role.
 
         package MyApp;
         use Moose;
         with 'IdcheckioPerl::Client::Role';
-        
+
         package main;
-        
+
         my $api = MyApp->new({ tokens => $tokens });
-        
+
         my $pet = $api->get_pet_by_id(pet_id => $pet_id);
-        
+
 
 ## Structure of the library
 
 The library consists of a set of API classes, one for each endpoint. These APIs
-implement the method calls available on each endpoint. 
+implement the method calls available on each endpoint.
 
-Additionally, there is a set of "object" classes, which represent the objects 
-returned by and sent to the methods on the endpoints. 
+Additionally, there is a set of "object" classes, which represent the objects
+returned by and sent to the methods on the endpoints.
 
-An API factory class is provided, which builds instances of each endpoint API. 
+An API factory class is provided, which builds instances of each endpoint API.
 
-This Moose role flattens all the methods from the endpoint APIs onto the consuming 
-class. It also provides methods to retrieve the endpoint API objects, and the API 
-factory object, should you need it. 
+This Moose role flattens all the methods from the endpoint APIs onto the consuming
+class. It also provides methods to retrieve the endpoint API objects, and the API
+factory object, should you need it.
 
 For documentation of all these methods, see AUTOMATIC DOCUMENTATION below.
 
@@ -64,33 +89,33 @@ required and where to put them. You just need to supply the tokens.
         # basic
         username => $username,
         password => $password,
-        
+
         # oauth
         access_token => $oauth_token,
-        
+
         # keys
         $some_key => { token => $token,
-                       prefix => $prefix, 
+                       prefix => $prefix,
                        in => $in,             # 'head||query',     
                        },
-                       
+
         $another => { token => $token,
-                      prefix => $prefix, 
+                      prefix => $prefix,
                       in => $in,              # 'head||query',      
                       },                   
         ...,
-        
+
         };
-        
+
         my $api = MyApp->new({ tokens => $tokens });
 
 Note these are all optional, as are `prefix` and `in`, and depend on the API
 you are accessing. Usually `prefix` and `in` will be determined by the code generator from
 the spec and you will not need to set them at run time. If not, `in` will
-default to 'head' and `prefix` to the empty string. 
+default to 'head' and `prefix` to the empty string.
 
 The tokens will be placed in the `IdcheckioPerl::Client::Configuration` namespace
-as follows, but you don't need to know about this. 
+as follows, but you don't need to know about this.
 
 - `$IdcheckioPerl::Client::Configuration::username`
 
@@ -121,22 +146,22 @@ as follows, but you don't need to know about this.
 
 - `$IdcheckioPerl::Client::Configuration::access_token`
 
-    String. The OAuth access token. 
+    String. The OAuth access token.
 
 # METHODS
 
 ## `base_url`
 
-The generated code has the `base_url` already set as a default value. This method 
-returns (and optionally sets, but only if the API client has not been 
+The generated code has the `base_url` already set as a default value. This method
+returns (and optionally sets, but only if the API client has not been
 created yet) the current value of `base_url`.
 
 ## `api_factory`
 
-Returns an API factory object. You probably won't need to call this directly. 
+Returns an API factory object. You probably won't need to call this directly.
 
         $self->api_factory('Pet'); # returns a IdcheckioPerl::Client::PetApi instance
-        
+
         $self->pet_api;            # the same
 
 # MISSING METHODS
@@ -146,9 +171,9 @@ Most of the methods on the API are delegated to individual endpoint API objects
 same method name (e.g. `new()`), these methods can't be delegated. So you need
 to call `$api->pet_api->new()`.
 
-In principle, every API is susceptible to the presence of a few, random, undelegatable 
-method names. In practice, because of the way method names are constructed, it's 
-unlikely in general that any methods will be undelegatable, except for: 
+In principle, every API is susceptible to the presence of a few, random, undelegatable
+method names. In practice, because of the way method names are constructed, it's
+unlikely in general that any methods will be undelegatable, except for:
 
         new()
         class_documentation()
@@ -161,12 +186,12 @@ you could also call them on class names.
 
 # BUILDING YOUR LIBRARY
 
-See the homepage `https://github.com/swagger-api/swagger-codegen` for full details. 
-But briefly, clone the git repository, build the codegen codebase, set up your build 
+See the homepage `https://github.com/swagger-api/swagger-codegen` for full details.
+But briefly, clone the git repository, build the codegen codebase, set up your build
 config file, then run the API build script. You will need git, Java 7 or 8 and Apache
 maven 3.0.3 or better already installed.
 
-The config file should specify the project name for the generated library: 
+The config file should specify the project name for the generated library:
 
         {"moduleName":"WWW::MyProjectName"}
 
@@ -181,8 +206,8 @@ Your library files will be built under `WWW::MyProjectName`.
     -c /path/to/config/file.json \
     -o /path/to/output/folder
 
-Bang, all done. Run the `autodoc` script in the `bin` directory to see the API 
-you just built. 
+Bang, all done. Run the `autodoc` script in the `bin` directory to see the API
+you just built.
 
 # AUTOMATIC DOCUMENTATION
 
@@ -194,28 +219,28 @@ output formats are supported:
 
     -w           wide format (default)
     -n           narrow format
-    -p           POD format 
-    -H           HTML format 
+    -p           POD format
+    -H           HTML format
     -m           Markdown format
     -h           print this help message
     -c           your application class
-    
+
 
 The `-c` option allows you to load and inspect your own application. A dummy
 namespace is used if you don't supply your own class.
 
 # DOCUMENTATION FROM THE OpenAPI Spec
 
-Additional documentation for each class and method may be provided by the Swagger 
-spec. If so, this is available via the `class_documentation()` and 
-`method_documentation()` methods on each generated object class, and the 
-`method_documentation()` method on the endpoint API classes: 
+Additional documentation for each class and method may be provided by the Swagger
+spec. If so, this is available via the `class_documentation()` and
+`method_documentation()` methods on each generated object class, and the
+`method_documentation()` method on the endpoint API classes:
+
+        my $cmdoc = $api->pet_api->method_documentation->{$method_name};
 
-        my $cmdoc = $api->pet_api->method_documentation->{$method_name}; 
-        
         my $odoc = $api->get_pet_by_id->(pet_id => $pet_id)->class_documentation;                                  
-        my $omdoc = $api->get_pet_by_id->(pet_id => $pet_id)->method_documentation->{method_name}; 
-        
+        my $omdoc = $api->get_pet_by_id->(pet_id => $pet_id)->method_documentation->{method_name};
+
 
 Each of these calls returns a hashref with various useful pieces of information.
 
@@ -359,6 +384,3 @@ Class | Method | HTTP request | Description
 ## basic
 
 - **Type**: HTTP basic authentication
-
-
-
-- 
2.9.3 (Apple Git-75)

